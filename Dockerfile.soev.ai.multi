# Dockerfile.multi
# v0.7.9-rc1

# Base for all builds
FROM node:20-alpine AS base-min
# Install jemalloc
RUN apk add --no-cache jemalloc
# Set environment variable to use jemalloc
ENV LD_PRELOAD=/usr/lib/libjemalloc.so.2
WORKDIR /app
RUN apk --no-cache add curl
RUN npm config set fetch-retry-maxtimeout 600000 && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-mintimeout 15000
COPY package*.json ./
COPY packages/data-provider/package*.json ./packages/data-provider/
COPY packages/api/package*.json ./packages/api/
COPY packages/data-schemas/package*.json ./packages/data-schemas/
COPY packages/librechat-admin/package*.json ./packages/librechat-admin/
COPY packages/custom/package*.json ./packages/custom/
COPY packages/client/package*.json ./packages/client/
COPY admin-frontend/package*.json ./admin-frontend/
COPY client/package*.json ./client/
COPY api/package*.json ./api/

# Install all dependencies for every build
FROM base-min AS base
WORKDIR /app
RUN npm ci

# Build `data-provider` package
FROM base-min AS data-provider-build
WORKDIR /app/packages/data-provider
COPY packages/data-provider ./
RUN npm install
RUN npm run build

# Build `data-schemas` package
FROM base-min AS data-schemas-build
WORKDIR /app/packages/data-schemas
COPY packages/data-schemas ./
COPY --from=data-provider-build /app/packages/data-provider/dist /app/packages/data-provider/dist
RUN npm install
RUN npm run build

# Build `api` package
FROM base-min AS api-package-build
WORKDIR /app/packages/api
COPY packages/api ./
COPY --from=data-provider-build /app/packages/data-provider/dist /app/packages/data-provider/dist
COPY --from=data-schemas-build /app/packages/data-schemas/dist /app/packages/data-schemas/dist
RUN npm install
RUN npm run build

# Build librechat-admin package
FROM base AS admin-package-build
WORKDIR /app/packages/librechat-admin
COPY packages/librechat-admin ./
COPY --from=data-provider-build /app/packages/data-provider/dist /app/packages/data-provider/dist
COPY --from=data-schemas-build /app/packages/data-schemas/dist /app/packages/data-schemas/dist
RUN npm run build

# Build admin frontend
FROM base AS admin-frontend-build
WORKDIR /app/admin-frontend
# Copy only package.json to avoid lockfile mismatch, then install deps
COPY admin-frontend/package.json ./
RUN npm install
COPY admin-frontend ./
RUN npm run build

# Build client component library (@librechat/client)
FROM base-min AS client-lib-build
WORKDIR /app/packages/client
COPY packages/client ./
RUN npm install
RUN npm run build

# Client build
FROM base AS client-build
WORKDIR /app/client
COPY client ./
COPY --from=data-provider-build /app/packages/data-provider/dist /app/packages/data-provider/dist
COPY --from=client-lib-build /app/packages/client/dist /app/packages/client/dist
ENV NODE_OPTIONS="--max-old-space-size=2048"
RUN npm run build

# API setup (including client dist)
FROM base-min AS api-build
# Add `uv` for extended MCP support
COPY --from=ghcr.io/astral-sh/uv:0.6.13 /uv /uvx /bin/
RUN uv --version
WORKDIR /app
# Install only production deps
RUN npm ci --omit=dev
COPY api ./api
COPY config ./config
COPY packages/custom ./packages/custom
COPY --from=data-provider-build /app/packages/data-provider/dist ./packages/data-provider/dist
COPY --from=data-schemas-build /app/packages/data-schemas/dist ./packages/data-schemas/dist
COPY --from=api-package-build /app/packages/api/dist ./packages/api/dist
COPY --from=admin-package-build /app/packages/librechat-admin/dist ./packages/librechat-admin/dist
COPY --from=admin-frontend-build /app/admin-frontend/dist ./admin-frontend/dist
COPY --from=client-build /app/client/dist ./client/dist
WORKDIR /app/api
EXPOSE 3080
ENV HOST=0.0.0.0
CMD ["node", "server/index.js"]